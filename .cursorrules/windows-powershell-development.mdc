---
description: 
globs: 
alwaysApply: true
---
# Windows PowerShell Development Guidelines

## Core Principles

### PowerShell-First Development
- All terminal commands and scripts must be PowerShell-compliant
- Use PowerShell cmdlets and syntax instead of Linux/bash equivalents
- Assume Windows environment with PowerShell as the primary shell

### Command Structure Guidelines

#### File Operations
- Use `Get-ChildItem` instead of `ls` or `dir`
- Use `Remove-Item` instead of `rm`
- Use `Copy-Item` instead of `cp`
- Use `Move-Item` instead of `mv`
- Use `New-Item` for creating files/directories

#### Directory Navigation
- Use `Set-Location` or `cd` for directory changes
- Use `Get-Location` or `pwd` for current directory
- Use `Push-Location`/`Pop-Location` for directory stack management

#### Process Management
- Use `Start-Process` instead of `&` for background processes
- Use `Get-Process` instead of `ps`
- Use `Stop-Process` instead of `kill`

### PowerShell-Specific Patterns

#### Command Chaining
- Use `;` for command separation instead of `&&`
- Use `|` for piping (PowerShell supports this)
- Use `-and` and `-or` for logical operations

#### Variable Assignment
- Use `$variable = value` syntax
- Use `$env:VARIABLE` for environment variables
- Use `${variable}` for complex variable names

#### Conditional Statements
```powershell
if (condition) {
    # code
} elseif (condition2) {
    # code
} else {
    # code
}
```

#### Loops
```powershell
foreach ($item in $collection) {
    # code
}

for ($i = 0; $i -lt $count; $i++) {
    # code
}

while (condition) {
    # code
}
```

### File Path Handling

#### Path Separators
- Use backslashes `\` for Windows paths
- Use forward slashes `/` for URLs and web paths
- Use `Join-Path` for path construction

#### Path Validation
- Use `Test-Path` to check if files/directories exist
- Use `Resolve-Path` to get absolute paths
- Use `Split-Path` to extract directory/file components

### Error Handling

#### Try-Catch Blocks
```powershell
try {
    # risky operation
} catch {
    Write-Error "Error occurred: $($_.Exception.Message)"
} finally {
    # cleanup code
}
```

#### Error Action Preferences
- Use `-ErrorAction Stop` to treat errors as exceptions
- Use `-ErrorAction SilentlyContinue` to suppress errors
- Use `-ErrorAction Continue` (default) for normal error handling

### Output and Logging

#### Output Commands
- Use `Write-Output` for normal output
- Use `Write-Host` for user-facing messages
- Use `Write-Warning` for warnings
- Use `Write-Error` for errors
- Use `Write-Verbose` for detailed logging

#### Formatting Output
- Use `Format-Table` for tabular data
- Use `Format-List` for detailed object properties
- Use `Format-Wide` for wide column display
- Use `Out-String` to convert to string

### Package Management

#### NuGet/Package Management
- Use `Install-Package` for NuGet packages
- Use `Get-Package` to list installed packages
- Use `Uninstall-Package` to remove packages

#### Chocolatey (if available)
- Use `choco install` for software installation
- Use `choco list` to see installed packages
- Use `choco upgrade` to update packages

### Git Operations in PowerShell

#### Basic Git Commands
- Use `git status` (works in PowerShell)
- Use `git add .` for staging
- Use `git commit -m "message"` for commits
- Use `git push` for pushing changes

#### PowerShell Git Aliases
```powershell
# Common git aliases for PowerShell
Set-Alias -Name gs -Value git-status
Set-Alias -Name ga -Value git-add
Set-Alias -Name gc -Value git-commit
Set-Alias -Name gp -Value git-push
```

### Script Development Best Practices

#### Script Structure
```powershell
#Requires -Version 5.1
param(
    [Parameter(Mandatory=$true)]
    [string]$Parameter1,
    
    [Parameter(Mandatory=$false)]
    [int]$Parameter2 = 10
)

# Script body
function Write-CustomMessage {
    param([string]$Message)
    Write-Host "Custom: $Message" -ForegroundColor Green
}

# Main execution
try {
    Write-CustomMessage -Message "Script started"
    # Main logic here
} catch {
    Write-Error "Script failed: $($_.Exception.Message)"
    exit 1
}
```

#### Module Development
- Use `Export-ModuleMember` to expose functions
- Use `Import-Module` to load modules
- Use `Get-Module` to list loaded modules

### Performance Considerations

#### Pipeline Usage
- Use pipelines for efficient data processing
- Avoid unnecessary variable assignments in pipelines
- Use `Where-Object` and `Select-Object` for filtering

#### Memory Management
- Use `Remove-Variable` to clean up large variables
- Use `[System.GC]::Collect()` for garbage collection when needed
- Avoid storing large datasets in memory unnecessarily

### Security Best Practices

#### Execution Policy
- Use `Get-ExecutionPolicy` to check current policy
- Use `Set-ExecutionPolicy` to change policy (requires admin)
- Use `-ExecutionPolicy Bypass` for individual script execution

#### Credential Handling
- Use `Get-Credential` for secure credential input
- Use `ConvertTo-SecureString` for password handling
- Use `Export-Clixml`/`Import-Clixml` for credential storage

### Common Anti-Patterns to Avoid

#### Don't Use Linux Commands
- ❌ `ls`, `rm`, `cp`, `mv`, `cat`
- ✅ `Get-ChildItem`, `Remove-Item`, `Copy-Item`, `Move-Item`, `Get-Content`

#### Don't Use Bash Syntax
- ❌ `&&` for command chaining
- ✅ `;` or separate statements

#### Don't Use Unix Paths
- ❌ `/path/to/file`
- ✅ `C:\path\to\file` or `.\relative\path`

### Development Environment Setup

#### PowerShell Profile
- Use `$PROFILE` to access profile path
- Use `Test-Path $PROFILE` to check if profile exists
- Use `New-Item -Path $PROFILE -ItemType File` to create profile

#### IDE Integration
- Configure VS Code with PowerShell extension
- Use `code .` to open current directory in VS Code
- Use `code filename.ps1` to open specific files

### Testing and Debugging

#### Debugging Commands
- Use `Set-PSBreakpoint` for breakpoints
- Use `Write-Debug` for debug output
- Use `$DebugPreference = "Continue"` to enable debug output

#### Testing Frameworks
- Use Pester for PowerShell testing
- Use `Invoke-Pester` to run tests
- Use `Describe`, `Context`, `It` blocks for test structure

### Documentation Standards

#### Comment-Based Help
```powershell
<#
.SYNOPSIS
    Brief description of function

.DESCRIPTION
    Detailed description of function

.PARAMETER ParameterName
    Description of parameter

.EXAMPLE
    Get-Example -ParameterName "value"

.NOTES
    Additional notes and information
#>
function Get-Example {
    param([string]$ParameterName)
    # Function body
}
```

This rule ensures all development work follows Windows PowerShell conventions and best practices, avoiding Linux/bash patterns that don't work in the Windows environment.

